package com.example.event_manager.events.domain.scheduler;

import com.example.event_manager.events.EventStatus;
import com.example.event_manager.events.domain.EventService;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.time.ZonedDateTime;

@Component
@EnableScheduling
public class EventStatusScheduler {

    private final EventService eventService;

    public EventStatusScheduler(
            EventService eventService
    ) {
        this.eventService = eventService;
    }

    @Scheduled(cron = "${event.stats.cron}")
    @Transactional
    public void scheduleEvent() {
        var eventList = eventService.getAllEvents();
        var now = ZonedDateTime.now();

        eventList.forEach(event -> {
            var eventEndTime = event.date().plusMinutes(event.duration());
            System.out.println("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: " + eventEndTime);

            EventStatus newStatus;

            if (now.isBefore(event.date())) {
                newStatus = EventStatus.WAIT_START;
            } else if (now.isAfter(event.date()) && now.isBefore(eventEndTime)) {
                newStatus = EventStatus.STARTED;
            } else {
                newStatus = EventStatus.FINISHED;
            }

            // üí° –ü—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∂–µ —Ç–∞–∫–æ–π, –Ω–∞—Ö—É–π —á—ë-—Ç–æ –¥–µ–ª–∞—Ç—å
            if (!event.status().equals(newStatus)) {
                eventService.updateStatus(event.id(), newStatus.name());
            }
        });
    }


    //–ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏(–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    @Scheduled(cron = "${event.stats.cron}")
    public void getTestTime() {
        System.out.println(ZonedDateTime.now());
    }
}
